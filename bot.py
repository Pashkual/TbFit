import sqlite3
import logging
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import csv
import os
import matplotlib.pyplot as plt
import random

from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = 1337650743

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATA_PATH = "data/user_data.json"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üèã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è"))
main_menu.add(KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
main_menu.add(KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å"), KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"))

# –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
WORKOUTS = {
    "–ü–Ω": "–†–∞–∑–º–∏–Ω–∫–∞ 5 –º–∏–Ω (—Ö–æ–¥—å–±–∞/–ø—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ), –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –º–µ–¥–ª–µ–Ω–Ω—ã–º –æ–ø—É—Å–∫–∞–Ω–∏–µ–º 3x15, –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞/–∫—Ä–æ–≤–∞—Ç–∏ 3x10, –ü–ª–∞–Ω–∫–∞ 3x30 —Å–µ–∫, –ó–∞–º–∏–Ω–∫–∞ (—Ä–∞—Å—Ç—è–∂–∫–∞ –Ω–æ–≥/–≥—Ä—É–¥–∏) 5 –º–∏–Ω",

    "–í—Ç": "–†–∞–∑–º–∏–Ω–∫–∞ 5 –º–∏–Ω (–∫–∞—Ä–¥–∏–æ –Ω–∞ –º–µ—Å—Ç–µ), –ö–∞—Ä–¥–∏–æ-–∫–æ–º–ø–ª–µ–∫—Å: 5 —Ä–∞—É–Ω–¥–æ–≤ ‚Äî 30 —Å–µ–∫ –±–µ—Ä–ø–∏, 30 —Å–µ–∫ –±–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ, 30 —Å–µ–∫ –ø—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ, –ü—Ä–µ—Å—Å: –ø–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15, –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—ä—ë–º–æ–º –Ω–æ–≥–∏ 3x20 —Å–µ–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É",

    "–°—Ä": "–ê–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –ô–æ–≥–∞-–∫–æ–º–ø–ª–µ–∫—Å 15 –º–∏–Ω (–∫–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞, –ø–æ–∑–∞ —Ä–µ–±—ë–Ω–∫–∞, –Ω–∞–∫–ª–æ–Ω—ã —Å—Ç–æ—è, —Ä–∞—Å—Ç—è–∂–∫–∞ –±—ë–¥–µ—Ä), –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 5 –º–∏–Ω (–≥–ª—É–±–æ–∫–æ–µ –¥–∏–∞—Ñ—Ä–∞–≥–º–∞–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ —Å—Ç–æ—è)",

    "–ß—Ç": "–†–∞–∑–º–∏–Ω–∫–∞ 5 –º–∏–Ω (–º–∞—Ö–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—É–∫–∞–º–∏, —Ö–æ–¥—å–±–∞), –ö–æ–º–ø–ª–µ–∫—Å —Å–∏–ª—ã: –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ —É —Å—Ç–µ–Ω—ã 3x8 (–Ω–∞ –∫–∞–∂–¥—É—é), –û—Ç–∂–∏–º–∞–Ω–∏—è —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º 3x8, –ü–ª–∞–Ω–∫–∞ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø–ª–µ—á 3x20 —Å–µ–∫, –ó–∞–º–∏–Ω–∫–∞ 5 –º–∏–Ω",

    "–ü—Ç": "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –∫–∞—Ä–¥–∏–æ-–∫–æ–º–ø–ª–µ–∫—Å: 30 —Å–µ–∫ –±—ã—Å—Ç—Ä—ã–π —à–∞–≥ –Ω–∞ –º–µ—Å—Ç–µ + 30 —Å–µ–∫ —É—Å–∫–æ—Ä–µ–Ω–∏—è (8 —Ä–∞—É–Ω–¥–æ–≤), –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '–≤–µ–ª–æ—Å–∏–ø–µ–¥' 3x20, –ü–æ–¥—ä—ë–º—ã —Ç–∞–∑–∞ –ª—ë–∂–∞ 3x20, –ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã —Å —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º 3x30 —Å–µ–∫",

    "–°–±": "–†–∞—Å—Ç—è–∂–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–ª–∞: —à–µ—è, –ø–ª–µ—á–∏, –≥—Ä—É–¥—å, —Å–ø–∏–Ω–∞, –Ω–æ–≥–∏ (–∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ 20 –º–∏–Ω—É—Ç), –ô–æ–≥–∞: –ø–æ–∑–∞ —Å–æ–±–∞–∫–∏ –º–æ—Ä–¥–æ–π –≤–Ω–∏–∑, –≥–æ–ª—É–±—å, —Å–∫—Ä—É—Ç–∫–∏ –ª—ë–∂–∞, –¥—ã—Ö–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ—Å, –æ—Ç–¥—ã—Ö",

    "–í—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö: –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –ø–∞–ª—É–±–µ –∏–ª–∏ –º–∞—Ä—à –Ω–∞ –º–µ—Å—Ç–µ 30 –º–∏–Ω —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—É–ª—å—Å–∞, –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ –∏ –º—è–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ (5‚Äì10 –º–∏–Ω)"
}

def load_data():
    if not os.path.exists("data.json"):
        return {}

    with open("data.json", "r") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_data(data):
    os.makedirs(os.path.dirname(DATA_PATH), exist_ok=True)
    with open(DATA_PATH, "w") as f:
        json.dump(data, f, indent=2)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä üí™", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "üèã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è")
async def handle_today(message: types.Message):
    today = datetime.now().strftime("%a")
    day = {"Mon": "–ü–Ω", "Tue": "–í—Ç", "Wed": "–°—Ä", "Thu": "–ß—Ç", "Fri": "–ü—Ç", "Sat": "–°–±", "Sun": "–í—Å"}[today]
    plan = WORKOUTS.get(day, "–û—Ç–¥—ã—Ö")
    await message.answer(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {day}\n\n{plan}")

    data = load_data()
    uid = str(message.from_user.id)
    user = data.setdefault(uid, {"done": []})
    user["done"].append(datetime.now().strftime("%Y-%m-%d"))
    save_data(data)

@dp.message_handler(lambda m: m.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    text = "\n".join([f"{day}: {plan}" for day, plan in WORKOUTS.items()])
    await message.answer(f"üóì –ü–ª–∞–Ω –Ω–µ–¥–µ–ª–∏:\n\n{text}")

@dp.message_handler(lambda m: m.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def send_weekly_graph(message: types.Message):
    data = load_data()
    uid = str(message.from_user.id)
    user = data.get(uid, {"done": []})

    today = datetime.now()
    days = [today - timedelta(days=i) for i in range(6, -1, -1)]
    counts = [user["done"].count(day.strftime("%Y-%m-%d")) for day in days]
    labels = [day.strftime("%a") for day in days]

    plt.figure(figsize=(8, 4))
    plt.bar(labels, counts, color="skyblue")
    plt.title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
    plt.xlabel("–î–µ–Ω—å")
    plt.ylabel("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    plt.tight_layout()
    path = f"data/{uid}_graph.png"
    plt.savefig(path)
    plt.close()
    with open(path, "rb") as img:
        await message.answer_photo(img)

@dp.message_handler(lambda m: m.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def help_msg(message: types.Message):
    await message.answer(
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ üö¥‚Äç‚ôÇÔ∏è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üèã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è\n"
        "üìä ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üìÜ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "üîÑ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    )

@dp.message_handler(lambda m: m.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def reset_data(message: types.Message):
    data = load_data()
    uid = str(message.from_user.id)
    if uid in data:
        data[uid]["done"] = []
        save_data(data)
    await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")

async def scheduled_check():
    now = datetime.now()
    if now.hour == 9:
        data = load_data()
        for uid in data:
            await bot.send_message(uid, "üïò –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è!")

if __name__ == "__main__":
    scheduler.add_job(scheduled_check, "interval", hours=1)
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
