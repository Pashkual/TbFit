
import os
import json
import logging
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATA_PATH = "data/user_data.json"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üèã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è"))
main_menu.add(KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
main_menu.add(KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å"), KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"))

# –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
WORKOUTS = {
    "–ü–Ω": "–û—Ç–∂–∏–º–∞–Ω–∏—è 3x12, –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 3x15, –ü–ª–∞–Ω–∫–∞ 3x30 —Å–µ–∫",
    "–í—Ç": "–ö–∞—Ä–¥–∏–æ (–ø—Ä—ã–∂–∫–∏, –±–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ) 15 –º–∏–Ω, –ø—Ä–µ—Å—Å 3x20",
    "–°—Ä": "–û—Ç–¥—ã—Ö –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∞ 10 –º–∏–Ω",
    "–ß—Ç": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 3x20, –û—Ç–∂–∏–º–∞–Ω–∏—è 3x10, –ü–ª–∞–Ω–∫–∞ 3x40 —Å–µ–∫",
    "–ü—Ç": "–ö–∞—Ä–¥–∏–æ 15 –º–∏–Ω, –ø—Ä–µ—Å—Å 3x25",
    "–°–±": "–ô–æ–≥–∞/—Ä–∞—Å—Ç—è–∂–∫–∞ 15 –º–∏–Ω",
    "–í—Å": "–û—Ç–¥—ã—Ö –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω"
}

def load_data():
    if os.path.exists(DATA_PATH):
        with open(DATA_PATH, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    os.makedirs(os.path.dirname(DATA_PATH), exist_ok=True)
    with open(DATA_PATH, "w") as f:
        json.dump(data, f, indent=2)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä üí™", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "üèã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è")
async def handle_today(message: types.Message):
    today = datetime.now().strftime("%a")
    day = {"Mon": "–ü–Ω", "Tue": "–í—Ç", "Wed": "–°—Ä", "Thu": "–ß—Ç", "Fri": "–ü—Ç", "Sat": "–°–±", "Sun": "–í—Å"}[today]
    plan = WORKOUTS.get(day, "–û—Ç–¥—ã—Ö")
    await message.answer(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {day}

{plan}")

    data = load_data()
    uid = str(message.from_user.id)
    user = data.setdefault(uid, {"done": []})
    user["done"].append(datetime.now().strftime("%Y-%m-%d"))
    save_data(data)

@dp.message_handler(lambda m: m.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    text = "\n".join([f"{day}: {plan}" for day, plan in WORKOUTS.items()])
    await message.answer(f"üóì –ü–ª–∞–Ω –Ω–µ–¥–µ–ª–∏:\n\n{text}")

@dp.message_handler(lambda m: m.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def send_weekly_graph(message: types.Message):
    data = load_data()
    uid = str(message.from_user.id)
    user = data.get(uid, {"done": []})

    today = datetime.now()
    days = [today - timedelta(days=i) for i in range(6, -1, -1)]
    counts = [user["done"].count(day.strftime("%Y-%m-%d")) for day in days]
    labels = [day.strftime("%a") for day in days]

    plt.figure(figsize=(8, 4))
    plt.bar(labels, counts, color="skyblue")
    plt.title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
    plt.xlabel("–î–µ–Ω—å")
    plt.ylabel("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    plt.tight_layout()
    path = f"data/{uid}_graph.png"
    plt.savefig(path)
    plt.close()
    with open(path, "rb") as img:
        await message.answer_photo(img)

@dp.message_handler(lambda m: m.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def help_msg(message: types.Message):
    await message.answer(
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ üö¥‚Äç‚ôÇÔ∏è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üèã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è\n"
        "üìä ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üìÜ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "üîÑ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    )

@dp.message_handler(lambda m: m.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def reset_data(message: types.Message):
    data = load_data()
    uid = str(message.from_user.id)
    if uid in data:
        data[uid]["done"] = []
        save_data(data)
    await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")

async def scheduled_check():
    now = datetime.now()
    if now.hour == 9:
        data = load_data()
        for uid in data:
            await bot.send_message(uid, "üïò –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è!")

if __name__ == "__main__":
    scheduler.add_job(scheduled_check, "interval", hours=1)
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
